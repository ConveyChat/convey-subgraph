// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MessageEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MessageEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MessageEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MessageEntity", id.toString(), this);
  }

  static load(id: string): MessageEntity | null {
    return store.get("MessageEntity", id) as MessageEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiver(): Bytes | null {
    let value = this.get("receiver");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes | null) {
    if (value === null) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromBytes(value as Bytes));
    }
  }

  get mid(): string {
    let value = this.get("mid");
    return value.toString();
  }

  set mid(value: string) {
    this.set("mid", Value.fromString(value));
  }
}

export class SubscriptionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SubscriptionEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SubscriptionEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SubscriptionEntity", id.toString(), this);
  }

  static load(id: string): SubscriptionEntity | null {
    return store.get("SubscriptionEntity", id) as SubscriptionEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get subscription(): Bytes {
    let value = this.get("subscription");
    return value.toBytes();
  }

  set subscription(value: Bytes) {
    this.set("subscription", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}
